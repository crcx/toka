[ 102 ] is VERSION
[ 10 parse drop ] is #!
[ 41 parse drop ] is-macro (

#! ---------------------------------------
#! Constants for classes
#! ---------------------------------------
[ 0 ] is .WORD
[ 1 ] is .MACRO
[ 2 ] is .DATA


#! ---------------------------------------
#! Constants for various ASCII values
#! ---------------------------------------
[ 32 ] is SPACE
[ 10 ] is CR
[ 13 ] is LF
[ 27 ] is ESC
[  9 ] is TAB


#! ---------------------------------------
#! Parsing extensions
#! ---------------------------------------
[ SPACE parse ] is wsparse
[ CR parse ] is lnparse


#! ---------------------------------------
#! Conditionals
#! ---------------------------------------
[  0 ] is FALSE
[ -1 ] is TRUE
[ [ ] ifTrueFalse ] is ifTrue
[ [ ] swap ifTrueFalse ] is ifFalse


#! ---------------------------------------
#! Obtaining Character
#! ---------------------------------------
[ 255 and ] is >char
[ wsparse c@ >char
  compiler @ [ # ] ifTrue
] is-macro char:


#! ---------------------------------------
#! Strings
#! ---------------------------------------
[ char: " 
  parse compiler @ [ $# ] ifTrue 
] is-macro "


#! ---------------------------------------
#! Output
#! ---------------------------------------
[ CR LF emit emit ] is cr
[ SPACE emit ] is space
[   TAB emit ] is tab
[ ` " invoke 
  compiler @ [ ` type compile ] [ type ] ifTrueFalse
] is-macro ."
[ ." \^[2J"
  ." \^[1;1H"
] is clear


#! ---------------------------------------
#! Stack manipulation
#! ---------------------------------------
[ swap drop ] is nip
[ >r swap r> swap ] is rot
[ rot rot ] is -rot
[ >r dup r> swap ] is over
[ dup -rot ] is tuck
[ over over ] is 2dup
[ drop drop ] is 2drop
[ depth 0 [ drop ] countedLoop ] is reset
[ r> dup >r ] is r@


#! ---------------------------------------
#! Math
#! ---------------------------------------
[ -1 * ] is negate
[ /mod nip ] is /
[ /mod drop ] is mod
[ -1 xor ] is not
[ swap >r / r> * ] is */


#! ---------------------------------------
#! Memory and Variables
#! ---------------------------------------
[ char-size * ] is chars
[ char-size + ] is char+
[ char-size - ] is char-
[ cell-size * ] is cells
[ cell-size + ] is cell+
[ cell-size - ] is cell-
[ dup @ rot + swap ! ] is +!
[ dup @ rot - swap ! ] is -!
[ TRUE  swap ! ] is on
[ FALSE swap ! ] is off
[ dup @ not swap ! ] is toggle
[ cell-size malloc 
  parser @ [ swap ] ifFalse is-data 
] is variable
[ parser off
  [ wsparse
    dup c@ char: | <>
    [ variable TRUE ] [ drop FALSE ] ifTrueFalse
  ] whileTrue
  parser on
] is variable|


#! ---------------------------------------
#! Numeric bases
#! ---------------------------------------
[ 16 base ! ] is hex
[ 10 base ! ] is decimal
[  2 base ! ] is binary
[  8 base ! ] is octal


#! ---------------------------------------
#! File I/O
#! ---------------------------------------
[ 1 ] is "R"
[ 2 ] is "R+"
[ 3 ] is "W"
[ 4 ] is "W+"
[ 5 ] is "A"
[ 6 ] is "A+"
[ 1 ] is START
[ 2 ] is CURRENT
[ 3 ] is END

[ "R" file.open 
  dup 0 <>
  [
    dup dup
    file.size 1 + dup malloc dup >r swap
    file.read drop
    file.close r>
  ] ifTrue
] is file.slurp


#! ---------------------------------------
#! Arrays
#! ---------------------------------------
[ parser @
  [ malloc ] [ >r malloc r> ] ifTrueFalse is-data 
] is is-array
[ swap cell-size * + @ ] is array.get
[ swap cell-size * + ! ] is array.put
[ swap char-size * + c@ ] is array.getChar
[ swap char-size * + c! ] is array.putChar


#! ---------------------------------------
#! Scope
#! ---------------------------------------
4 cells is-array <list>

[ last @ <list> @ 1 + <list> array.put
  1 <list> +!
] is {
[ 1 <list> -!
  <list> @ 1 + <list> array.get last !
] is }


#! ---------------------------------------
#! Make extending the language a little easier
#! ---------------------------------------
[ ` [ invoke >r swap # compile r> ` ] invoke parser @ [ swap ] ifFalse is ] is +action


#! ---------------------------------------
#! Values
#! ---------------------------------------
{
  variable update
  [ update on ]
  [ cell-size malloc [ update @ [ ! ] [ @ ] ifTrueFalse update off ] +action ] 
} is value
  is to
[ parser off
  [ wsparse
    dup c@ char: | <>
    [ value TRUE ] [ drop FALSE ] ifTrueFalse
  ] whileTrue
  parser on
] is value|


#! ---------------------------------------
#! Strings
#! ---------------------------------------
{
  1 import strlen 
  [ dup strlen ]
} is string.getLength 
{
  2 import strcpy
  [ >r string.getLength char+ r> + malloc swap strcpy ]
} is string.grow
{
  2 import strcat
  [ swap string.getLength 2 chars + string.grow swap strcat ]
} is string.append
{
  2 chars is-array append
  [ 0 append array.putChar append string.append ]
} is string.appendChar
{
  2 import strcmp
  [ strcmp 0 = ]
} is string.compare
[ 1 string.grow ] is string.clone


#! ---------------------------------------
#! Debugging Aids
#! ---------------------------------------
[ dup last @ 0 [ i :class over = [ i :name type space ] ifTrue ] countedLoop cr ] is words-within
[ .DATA words-within ] is :datas
[ .WORD words-within .MACRO words-within ] is :quotes
[ last @ 0 [ i :name type space ] countedLoop cr ] is words

{
  value #items
  [ depth to #items
    #items char: < emit space . char: > emit space
    #items 0 [ >r ] countedLoop
    #items 0 [ r> dup . ] countedLoop
    cr
  ]
} is :stack
